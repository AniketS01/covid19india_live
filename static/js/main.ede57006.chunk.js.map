{"version":3,"sources":["components/navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","makeStyles","theme","textAlign","AppBar","position","Toolbar","Typography","variant","Component","App","state","states","axios","get","then","res","console","log","setState","data","statewise","class","this","map","i","Card","style","CardContent","color","gutterBottom","component","confirmed","recovered","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kUAiCeA,GAzBGC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAU,YAGZ,uKAGQ,OACI,6BACG,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACZ,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAChB,kDACA,yDAA8B,6BAA9B,yCAV5B,GAA4BC,c,iCC4CbC,E,4MA7CZC,MAAQ,CACNC,OAAQ,I,uLAITC,IAAMC,IAAI,0CAA0CC,MAAK,SAAAC,GACvDC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACP,OAAQI,EAAII,KAAKC,e,gIAUlC,OACA,yBAAKC,MAAM,WACT,kBAAC,EAAD,MACDC,KAAKZ,MAAMC,OAAOY,KAAI,SAAAC,GAAC,OACjB,kBAACC,EAAA,EAAD,CAAMJ,MAAQ,QAAQK,MAAQ,CAACxB,UAAU,WAC9C,kBAACyB,EAAA,EAAD,KACE,kBAACrB,EAAA,EAAD,CAAasB,MAAM,gBAAgBC,cAAY,GAC7C,2BAAIL,EAAEd,QAER,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKuB,UAAU,MAAnC,aACaN,EAAEO,WAEf,kBAACzB,EAAA,EAAD,CAAaC,QAAQ,KAAKuB,UAAU,MAApC,aACYN,EAAEQ,WAEd,kBAAC1B,EAAA,EAAD,CAAYC,QAAQ,KAAKuB,UAAU,MAAnC,UACSN,EAAES,kB,GAlCAzB,aCEC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.ede57006.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textAlign:'right'\r\n}));\r\n\r\nexport class Navbar extends Component {\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n               <AppBar position=\"relative\">\r\n                    <Toolbar>\r\n                        \r\n                        <Typography variant=\"h6\">\r\n                            <h3>Covid19 India live</h3>\r\n                            <p>created by: Aniket Shetye  <br/>\r\n                            Api credits: covid19india.org</p>\r\n\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n\r\n","import './App.css';\nimport React, { Component } from 'react'\nimport Navbar from './components/navbar/Navbar'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n//import Cards from './components/cards/Cards'\n\n class App extends Component {\n   state = {\n     states: []\n   }\n\n  async componentDidMount(){\n    axios.get('https://api.covid19india.org/data.json').then(res => {\n      console.log(res)\n      this.setState({states: res.data.statewise})\n    })\n\n  }\n  \n    \n\n     render() {\n   \n\n    return(\n    <div class='content'>\n      <Navbar />\n    {this.state.states.map(i => \n           <Card class = \"jumbo\" style= {{textAlign:'center'}}>\n      <CardContent>\n        <Typography  color=\"textSecondary\" gutterBottom>\n          <b>{i.state}</b>\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          Confirmed:{i.confirmed}\n        </Typography>\n        <Typography  variant=\"h5\" component=\"h2\">\n         Recovered:{i.recovered}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n         Deaths:{i.deaths}\n        </Typography>\n      </CardContent>\n     </Card>\n     )}\n    </div>      \n          \n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}